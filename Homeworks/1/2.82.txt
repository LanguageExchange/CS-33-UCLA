2.82
A)
Does not always evaluate to 1. If x is INT_MIN, for which there is no positive int within boundaries with the same absolute value, the expression would not hold true for any value of y not equal to INT_MIN. -INT_MIN would evaluate to INT_MIN because it would be INT_MAX + 1, which would become INT_MIN.
B)
Always evaluates to 1.
(x+y)<<4 is equivalent to 
16(x+y)
so
((x+y)<<4) + y-x
== 16*x + 16*y + y - x
== 15*x + 17*y
== 17*y+15*x
C)
Always evaluates to 1.
~x + ~y + 1 
== (-1 - x) + (-1 - y) + 1
== -2 + 1 - x - y
== -1 - x - y
== -1 - (x + y)
== ~(x + y)
D)
Does not always evaluate to 1.
The right hand side will always be negative becausee after a cast to unsigned, the value can only be positive, and there is a negative in front of that. The left side, however, can be either positive or negative depending on the magnitudes of x and y.
E) 
Always evaluates to 1.
The right shift (arithmetic) could potentially add 2 1's to the front of the bit vector, making it all the more negative, while the left shift would turn the 2 rightmost bits to 0, only possibly decreasing the number's value, for a positive number, or making the number more negative if it was negative because all of the bits are shifted to more significant positions.
F)
Always evaluates to 1.
Because x is signed, x >> 1 will be an arithmetic shift, but since ux is unsigned, ux >> 1 will be a logical shift. In effect, adding (ux & (-1 << 31)) to ux after its logical shift turns it into an arithmetic shift because the overlap between ux and (-1 << 31) yields the values that would have been present due to an arithmetic shift.
G)
Does not always evaluate to 1.
The expression will generally evaluate to 1 when x is positive, but negative values of x represented in 2's complement will yield 0 because the bit representation of x & the bit representation of 127 will not give the remainder of x / 128.
